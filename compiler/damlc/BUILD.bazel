# Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load("//bazel_tools:haskell.bzl", "da_haskell_binary", "da_haskell_library", "da_haskell_test")
load("//rules_daml:daml.bzl", "daml_compile")
load("@os_info//:os_info.bzl", "is_windows")
load("//bazel_tools/packaging:packaging.bzl", "package_app")

da_haskell_binary(
    name = "damlc",
    srcs = ["exe/Main.hs"],

    # We need to tell the linker to statically link pthread on Windows
    # otherwise the library is not found at runtime.
    compiler_flags = [
        "-optl-static",
        "-optl-pthread",
    ] if is_windows else [],
    data = [
        "//compiler/damlc/pkg-db",
        "//compiler/scenario-service/server:scenario_service_jar",
    ],
    hazel_deps = [
        "base",
    ],
    src_strip_prefix = "src",
    visibility = ["//visibility:public"],
    deps = [
        ":damlc-lib",
    ],
)

# damlc without runfiles. We use that to build the daml-prim and daml-stdlib
# package databases.
da_haskell_binary(
    name = "damlc-bootstrap",
    srcs = ["exe/Main.hs"],

    # We need to tell the linker to statically link pthread on Windows
    # otherwise the library is not found at runtime.
    compiler_flags = [
        "-optl-static",
        "-optl-pthread",
    ] if is_windows else [],
    hazel_deps = [
        "base",
    ],
    src_strip_prefix = "src",
    visibility = ["//visibility:public"],
    deps = [
        ":damlc-lib",
    ],
)

package_app(
    name = "damlc-dist",
    binary = ":damlc",
    resources = [
        ":ghc-pkg-dist",
        "//compiler/damlc/pkg-db",
        "//compiler/scenario-service/server:scenario_service_jar",
    ],
    tags = ["no-cache"],
    visibility = ["//visibility:public"],
)

# ghc-pkg is linked dynamically on Linux by default so we need to run it through package_app
# before we distribute it.
package_app(
    name = "ghc-pkg-dist",
    # bin/ghc-pkg is actually a wrapper script on Unix systems so it is
    # important that we use lib/ghc-$VERSION/bin/ghc-pkg instead which is the
    # actual executable.
    binary = "@io_tweag_rules_haskell_ghc_windows_amd64//:bin/ghc-pkg.exe" if is_windows else "@ghc_nix//:lib/ghc-8.6.5/bin/ghc-pkg",
    visibility = ["//visibility:public"],
)

da_haskell_library(
    name = "damlc-lib",
    srcs = glob(["lib/**/*.hs"]),
    extra_srcs = [
        "//compiler/daml-licenses/licenses:licensing.md",
    ],
    hazel_deps = [
        "aeson-pretty",
        "aeson",
        "ansi-wl-pprint",
        "base",
        "bytestring",
        "containers",
        "cryptonite",
        "directory",
        "extra",
        "file-embed",
        "filepath",
        "ghc-lib",
        "ghc-lib-parser",
        "gitrev",
        "haskell-lsp",
        "lens-aeson",
        "lens",
        "memory",
        "mtl",
        "network",
        "optparse-applicative",
        "prettyprinter",
        "process",
        "proto3-suite",
        "safe",
        "safe-exceptions",
        "shake",
        "split",
        "tasty-ant-xml",
        "tasty-hunit",
        "tasty",
        "temporary",
        "text",
        "vector",
        "xml",
        "yaml",
        "zip-archive",
        "unordered-containers",
        "uniplate",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:sdk-version-hs-lib",
        "//compiler/daml-lf-ast",
        "//compiler/daml-lf-proto",
        "//compiler/daml-lf-reader",
        "//compiler/daml-lf-tools",
        "//compiler/hie-core",
        "//compiler/scenario-service/client",
        "//compiler/scenario-service/protos:scenario_service_haskell_proto",
        "//daml-assistant:daml-project-config",
        "//daml-foundations/daml-ghc/daml-compiler",
        "//daml-foundations/daml-ghc/damldoc",
        "//daml-foundations/daml-ghc/ghc-compiler",
        "//daml-foundations/daml-ghc/ide",
        "//daml-foundations/daml-ghc/language-server",
        "//daml-lf/archive:daml_lf_haskell_proto",
        "//libs-haskell/bazel-runfiles",
        "//libs-haskell/da-hs-base",
    ],
)

# Tests for the lax CLI parser
da_haskell_test(
    name = "damlc-cliparser-test",
    srcs = ["cli-tests/CliParser.hs"],
    hazel_deps = [
        "tasty",
        "base",
        "optparse-applicative",
        "tasty-hunit",
    ],
    main_function = "Cli.main",
    src_strip_prefix = "tests",
    visibility = ["//visibility:private"],
    deps = [
        ":damlc-lib",
    ],
)

# Tests for damlc visual
da_haskell_test(
    name = "damlc-visual-test",
    srcs = ["cli-tests/DamlcVisual.hs"],
    data = [
        ":cli-tests/visual/Basic.dot",
        ":visual-test-daml.dar",
        # "//daml-foundations/daml-ghc/package-database:package-db",
    ],
    hazel_deps = [
        "tasty",
        "base",
        "extra",
        "filepath",
        "tasty-golden",
    ],
    main_function = "VisualTest.main",
    src_strip_prefix = "tests",
    visibility = ["//visibility:private"],
    deps = [
        ":damlc-lib",
        "//libs-haskell/bazel-runfiles",
    ],
)

# Test file used in damlc-visual-test
daml_compile(
    name = "visual-test-daml",
    main_src = "cli-tests/visual/Basic.daml",
)

# Tests for damlc test
da_haskell_test(
    name = "damlc-test-test",
    srcs = ["cli-tests/DamlcTest.hs"],
    data = [
        "//compiler/damlc/pkg-db",
        "//compiler/scenario-service/server:scenario_service_jar",
    ],
    hazel_deps = [
        "base",
        "extra",
        "tasty",
        "tasty-hunit",
    ],
    main_function = "DamlcTest.main",
    src_strip_prefix = "tests",
    visibility = ["//visibility:private"],
    deps = [
        ":damlc-lib",
        "//compiler/hie-core",
        "//daml-foundations/daml-ghc/ghc-compiler",
        "//libs-haskell/da-hs-base",
    ],
)
